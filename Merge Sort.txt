Problem statement
You are given the starting 'l' and the ending 'r' positions of the array 'ARR'.



You must sort the elements between 'l' and 'r'.



Note:
Change in the input array itself. So no need to return or print anything.
Example:
Input: ‘N’ = 7,
'ARR' = [2, 13, 4, 1, 3, 6, 28]

Output: [1 2 3 4 6 13 28]

Explanation: After applying 'merge sort' on the input array, the output is [1 2 3 4 6 13 28].
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
7
2 13 4 1 3 6 28
Sample Output 1:
1 2 3 4 6 13 28
Explanation of Sample Output 1:
After applying 'merge sort' on the input array, the output is [1 2 3 4 6 13 28].
Sample Input 2:
5
9 3 6 2 0
Sample Output 2:
0 2 3 6 9
Explanation of Sample Output 2:
After applying 'merge sort' on the input array, the output is [0 2 3 6 9].
Constraints :
1 <= N <= 10^3
0 <= ARR[i] <= 10^9


-------------------------------------------------------------------------CODE-------------------------------------------------------------------------------

public class Solution {
    public static void mergeSort(int[] arr, int l, int r) {
        if (l < r) {
            int mid = (l + r) / 2;
            mergeSort(arr, l, mid);
            mergeSort(arr, mid + 1, r);
            merge(arr, l, mid, r);
        }
    }

    public static void merge(int[] arr, int l, int mid, int r) {
        int len1 = mid - l + 1;
        int len2 = r - mid;
        int leftarr[] = new int[len1];
        int rightarr[] = new int[len2];

        for (int i = 0; i < len1; i++) {
            leftarr[i] = arr[l + i];
        }
        for (int i = 0; i < len2; i++) {
            rightarr[i] = arr[mid + i + 1];
        }

        int ptrA = 0, ptrB = 0;
        int ptrC = l;

        while (ptrA < len1 && ptrB < len2) {
            if (leftarr[ptrA] < rightarr[ptrB]) {
                arr[ptrC] = leftarr[ptrA];
                ptrA = ptrA + 1;
            } else {
                arr[ptrC] = rightarr[ptrB];
                ptrB = ptrB + 1;
            }
            ptrC = ptrC + 1;
        }

        while (ptrA < len1) {
            arr[ptrC] = leftarr[ptrA];
            ptrA = ptrA + 1;
            ptrC = ptrC + 1;
        }

        while (ptrB < len2) {
            arr[ptrC] = rightarr[ptrB];
            ptrB = ptrB + 1;
            ptrC = ptrC + 1;
        }
    }

    public static void main(String[] args) {
        int[] arr = {12, 11, 13, 5, 6, 7};
        mergeSort(arr, 0, arr.length - 1);
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}
